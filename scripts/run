#!/bin/bash

SITE_ROOT=$(realpath $(dirname $(realpath $0))/..)
export HOME=$SITE_ROOT
cd $SITE_ROOT
source $SITE_ROOT/scripts/base.sh
_load_env $SITE_ROOT

# env=$(cat $SITE_ROOT/vars/ENV)
# source $SITE_ROOT/.env.$env
# source $SITE_ROOT/scripts/base.sh

GRAFANA_VERSION=v8.2.1
PROMETHEUS_VERSION=v2.30.3
ASDF=$SITE_ROOT/bin/.asdf/installs
GRAFANA_DIR=$ASDF/grafana/$GRAFANA_VERSION
PROMETHEUS_DIR=$ASDF/prometheus/$PROMETHEUS_VERSION

REPOS="/etc/letsencrypt|$GIT_PRIVATE_READ_URL/massbitroute/ssl.git|master \
/massbit/massbitroute/app/gbc|$GIT_PUBLIC_URL/massbitprotocol/massbitroute_gbc.git \
/massbit/massbitroute/app/gbc/bin/.asdf|$GIT_PUBLIC_URL/massbitprotocol/massbitroute_asdf.git \
$SITE_ROOT|$GIT_PUBLIC_URL/massbitprotocol/massbitroute_stat.git \
$SITE_ROOT/etc/mkagent|$GIT_PUBLIC_URL/massbitprotocol/massbitroute_mkagent.git"

# git="git -C $SITE_ROOT"
TYPE="stat"
# service_dir=/massbit/massbitroute/app/src/sites/services
# dir=$service_dir/$TYPE
# mkdir -p $dir
# mbr_cli="$dir/mbr"
# script_run="$dir/scripts/run"
# cmd="$dir/cmd_server"
# nginx="$cmd nginx"

_install() {
	_git_config
	for _pathgit in $REPOS; do
		_path=$(echo $_pathgit | cut -d'|' -f1)
		_url=$(echo $_pathgit | cut -d'|' -f2)
		_branch=$(echo $_pathgit | cut -d'|' -f3)
		_git_clone $_url $_path $_branch
	done

	ln -sf /massbit/massbitroute/app/gbc /massbit/massbitroute/app/src/gbc
	ln -sf /massbit/massbitroute/app/gbc/bin/openresty /usr/local/openresty
	apt-get update
	apt-get install -y git apache2-utils supervisor jq python-is-python2 libssl-dev
	cp supervisor.conf /etc/supervisor/conf.d/${TYPE}.conf
	systemctl enable supervisor
	systemctl start supervisor
	supervisorctl update

}

_service_grafana() {
	mkdir -p $SITE_ROOT/data/grafana
	# val=$(echo $SITE_ROOT | sed 's/\//\\\//g')
	# sed "s/_SITE_ROOT_/$val/g" $SITE_ROOT/etc/grafana/stat_tmpl.ini >$SITE_ROOT/etc/grafana/stat.ini

	exec $GRAFANA_DIR/bin/grafana-server -config $SITE_ROOT/etc/grafana/stat.ini -homepath $GRAFANA_DIR
}

# service config for Prometheus Node
_service_prometheus_node() {
	mkdir -p $SITE_ROOT/data/prometheus_node
	# ASDF=$SITE_ROOT/bin/.asdf/installs
	# PROMETHEUS_DIR=$ASDF/prometheus/$PROMETHEUS_VERSION
	exec $PROMETHEUS_DIR/bin/prometheus --web.enable-admin-api --config.file=$SITE_ROOT/etc/prometheus/stat_node.yml --web.listen-address="127.0.0.1:44448" --web.external-url http://127.0.0.1:44448/__internal_prometheus_node --web.enable-lifecycle --storage.tsdb.path $SITE_ROOT/data/prometheus_node
}

# service config for Prometheus Gateway
_service_prometheus_gw() {
	mkdir -p $SITE_ROOT/data/prometheus_gw
	# ASDF=$SITE_ROOT/bin/.asdf/installs
	# PROMETHEUS_DIR=$ASDF/prometheus/$PROMETHEUS_VERSION
	exec $PROMETHEUS_DIR/bin/prometheus --web.enable-admin-api --config.file=$SITE_ROOT/etc/prometheus/stat_gw.yml --web.listen-address="127.0.0.1:44449" --web.external-url http://127.0.0.1:44449/__internal_prometheus_gw --web.enable-lifecycle --storage.tsdb.path $SITE_ROOT/data/prometheus_gw
}

# _update_listid_gw() {
# 	_dir=$SITE_ROOT/etc/prometheus
# 	mkdir -p $_dir/stat_gw
# 	tmpd=$(mktemp -d)
# 	curl -sk https://dapi.${DOMAIN}/deploy/info/gateway/listid | while read id user_id blockchain network _remain; do
# 		if [ -z "$id" ]; then continue; fi
# 		echo "          - ${id}.gw.mbr.${DOMAIN}" $tmpd/${blockchain}-${network}.yml
# 		echo "          - ${id}.gw.mbr.${DOMAIN}" >>$tmpd/${blockchain}-${network}.yml
# 	done
# 	echo rm $_dir/stat_gw/*.yml
# 	rm $_dir/stat_gw/*.yml
# 	echo mv $tmpd/*.yml $_dir/stat_gw/
# 	cat $tmpd/*.yml
# 	mv $tmpd/*.yml $_dir/stat_gw/
# 	rm -rf $tmpd
# }
# _update_listid_node() {
# 	_dir=$SITE_ROOT/etc/prometheus
# 	mkdir -p $_dir/stat_node
# 	tmpd=$(mktemp -d)
# 	curl -sk https://dapi.${DOMAIN}/deploy/info/node/listid | while read id user_id blockchain network _remain; do
# 		if [ -z "$id" ]; then continue; fi
# 		echo "          - ${id}.node.mbr.${DOMAIN}" $tmpd/${blockchain}-${network}.yml
# 		echo "          - ${id}.node.mbr.${DOMAIN}" >>$tmpd/${blockchain}-${network}.yml
# 	done
# 	echo rm $_dir/stat_node/*.yml
# 	rm $_dir/stat_node/*.yml
# 	echo mv $tmpd/*.yml $_dir/stat_node/
# 	cat $tmpd/*.yml
# 	mv $tmpd/*.yml $_dir/stat_node/
# 	rm -rf $tmpd
# }
# _update_listid() {
# 	_update_listid_gw
# 	_update_listid_node
# }

_rebuild_conf() {
	#	_update_listid
	_dir=$SITE_ROOT/etc/prometheus

	_file_ok=$SITE_ROOT/etc/prometheus/stat_gw.yml
	_file=$(mktemp)
	cat $SITE_ROOT/etc/prometheus/_stat.yml >$_file

	find $_dir/stat_gw -type f -iname '*.yml' | while read f; do
		cat $f >>$_file
		echo >>$_file
	done
	mv $_file $_file_ok

	_file_ok=$SITE_ROOT/etc/prometheus/stat_node.yml
	_file=$(mktemp)
	cat $SITE_ROOT/etc/prometheus/_stat.yml >$_file

	find $_dir/stat_node -type f -iname '*.yml' | while read f; do
		cat $f >>$_file
		echo >>$_file
	done
	mv $_file $_file_ok
}

_reload() {
	_rebuild_conf
	bash $SITE_ROOT/etc/mkagent/push.sh _kill
	curl -X POST http://127.0.0.1:44448/__internal_prometheus_node/-/reload
	curl -X POST http://127.0.0.1:44449/__internal_prometheus_gw/-/reload
	$SITE_ROOT/cmd_server _update
}

_monitor() {

	_update_sources $REPOS
	is_reload=$?
	if [ $is_reload -ne 0 ]; then
		$0 _reload
	fi
}

_run() {
	$SITE_ROOT/start_server
}

$@
