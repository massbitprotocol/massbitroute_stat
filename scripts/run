#!/bin/bash
GRAFANA_VERSION=v8.2.1
PROMETHEUS_VERSION=v2.30.3

SITE_ROOT=$(realpath $(dirname $(realpath $0))/..)

env=$(cat $SITE_ROOT/vars/ENV)
source $SITE_ROOT/.env.$env
source $SITE_ROOT/scripts/base.sh

ASDF=$SITE_ROOT/bin/.asdf/installs
GRAFANA_DIR=$ASDF/grafana/$GRAFANA_VERSION
PROMETHEUS_DIR=$ASDF/prometheus/$PROMETHEUS_VERSION

export HOME=/tmp
cd $SITE_ROOT

#source $SITE_ROOT/.env
git="git -C $SITE_ROOT"
type="stat"
service_dir=/massbit/massbitroute/app/src/sites/services
dir=$service_dir/$type
mkdir -p $dir
mbr_cli="$dir/mbr"
script_run="$dir/scripts/run"
cmd="$dir/cmd_server"
nginx="$cmd nginx"

_git_config() {
	$git config --global user.name "Vu Tran"
	$git config --global user.email "baysao@gmail.com"
}
_reload() {
	bash $SITE_ROOT/etc/mkagent/push.sh _kill
	curl -X POST http://127.0.0.1:44448/__internal_prometheus_node/-/reload
	curl -X POST http://127.0.0.1:44449/__internal_prometheus_gw/-/reload
	$cmd _update
}

# _git_clone() {
# 	_url=$1
# 	_dir=$2
# 	if [ -d "$_dir" ]; then rm -rf $_dir; fi
# 	mkdir -p $_dir
# 	git clone $_url $_dir
# 	# git -C $_dir remote set-url origin $_url
# }
_install() {

	_git_clone https://github.com/massbitprotocol/massbitroute_gbc.git /massbit/massbitroute/app/gbc
	_git_clone https://github.com/massbitprotocol/massbitroute_asdf.git /massbit/massbitroute/app/gbc/bin/.asdf
	_git_clone https://github.com/massbitprotocol/massbitroute_mkagent.git $SITE_ROOT/etc/mkagent

	if [ -f "$SITE_ROOT/scripts/install_private.sh" ]; then
		bash $SITE_ROOT/scripts/install_private.sh
	fi

	ln -sf /massbit/massbitroute/app/gbc /massbit/massbitroute/app/src/gbc
	ln -sf /massbit/massbitroute/app/gbc/bin/openresty /usr/local/openresty
	apt-get update
	apt-get install -y git apache2-utils supervisor jq python-is-python2 libssl-dev
	cp supervisor.conf /etc/supervisor/conf.d/${type}.conf
	systemctl enable supervisor
	systemctl start supervisor
	supervisorctl update

}

_service_grafana() {
	mkdir -p $SITE_ROOT/data/grafana
	# val=$(echo $SITE_ROOT | sed 's/\//\\\//g')
	# sed "s/_SITE_ROOT_/$val/g" $SITE_ROOT/etc/grafana/stat_tmpl.ini >$SITE_ROOT/etc/grafana/stat.ini

	exec $GRAFANA_DIR/bin/grafana-server -config $SITE_ROOT/etc/grafana/stat.ini -homepath $GRAFANA_DIR
}

# service config for Prometheus Node
_service_prometheus_node() {
	mkdir -p $SITE_ROOT/data/prometheus_node
	# ASDF=$SITE_ROOT/bin/.asdf/installs
	# PROMETHEUS_DIR=$ASDF/prometheus/$PROMETHEUS_VERSION
	exec $PROMETHEUS_DIR/bin/prometheus --web.enable-admin-api --config.file=$SITE_ROOT/etc/prometheus/stat_node.yml --web.listen-address="127.0.0.1:44448" --web.external-url http://127.0.0.1:44448/__internal_prometheus_node --web.enable-lifecycle --storage.tsdb.path $SITE_ROOT/data/prometheus_node
}

# service config for Prometheus Gateway
_service_prometheus_gw() {
	mkdir -p $SITE_ROOT/data/prometheus_gw
	# ASDF=$SITE_ROOT/bin/.asdf/installs
	# PROMETHEUS_DIR=$ASDF/prometheus/$PROMETHEUS_VERSION
	exec $PROMETHEUS_DIR/bin/prometheus --web.enable-admin-api --config.file=$SITE_ROOT/etc/prometheus/stat_gw.yml --web.listen-address="127.0.0.1:44449" --web.external-url http://127.0.0.1:44449/__internal_prometheus_gw --web.enable-lifecycle --storage.tsdb.path $SITE_ROOT/data/prometheus_gw
}

loop() {
	while true; do
		$0 $@
		sleep 3
	done
}
_update_listid_gw() {
	_dir=$SITE_ROOT/etc/prometheus
	mkdir -p $_dir/stat_gw
	tmpd=$(mktemp -d)
	_dirty=0
	curl -sk https://dapi.${DOMAIN}/deploy/info/gateway/listid | while read id user_id blockchain network _remain; do
		if [ -z "$id" ]; then continue; fi
		_dirty=1
		echo "          - ${id}.gw.mbr.${DOMAIN}" >>$tmpd/${blockchain}-${network}.yml
	done
	if [ $_dirty -eq 1 ]; then
		rm $_dir/stat_gw/*.yml
		mv $tmpd/*.yml $_dir/stat_gw/
	fi
	rm -rf $tmpd
}
_update_listid() {
	_update_listid_gw

}

_rebuild_conf() {

	_dir=$SITE_ROOT/etc/prometheus

	_file_ok=$SITE_ROOT/etc/prometheus/stat_gw.yml
	_file=$(mktemp)
	cat $SITE_ROOT/etc/prometheus/_stat.yml >$_file

	find $_dir/stat_gw -type f -iname '*.yml' | while read f; do
		cat $f >>$_file
		echo >>$_file
	done
	mv $_file $_file_ok

	_file_ok=$SITE_ROOT/etc/prometheus/stat_node.yml
	_file=$(mktemp)
	cat $SITE_ROOT/etc/prometheus/_stat.yml >$_file

	find $_dir/stat_node -type f -iname '*.yml' | while read f; do
		cat $f >>$_file
		echo >>$_file
	done
	mv $_file $_file_ok
}
_monitor() {
	_rebuild_conf
	is_reload=0
	echo mbr-stat >vars/TYPE

	for d in /etc/letsencrypt /massbit/massbitroute/app/gbc $SITE_ROOT $SITE_ROOT/etc/mkagent; do
		mkdir -p $d
		git -C $d pull | grep -i "updating"
		if [ $? -eq 0 ]; then
			is_reload=1
		fi
	done

	if [ $is_reload -ne 0 ]; then
		$0 _reload
	fi
}

_run() {
	$SITE_ROOT/start_server
}

$@
